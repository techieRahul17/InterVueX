import { useState, useEffect, useRef } from 'react';
import { Link } from 'react-router-dom';

const TrainingMode = () => {
    const [isRecording, setIsRecording] = useState(false);
    const [currentQuestion, setCurrentQuestion] = useState('');
    const [questions, setQuestions] = useState([]);
    const [transcript, setTranscript] = useState([]);
    const [feedback, setFeedback] = useState(null);
    const [selectedSkill, setSelectedSkill] = useState('React');
    const [difficulty, setDifficulty] = useState('intermediate');
    const [sentimentScore, setSentimentScore] = useState({
        confidence: 70,
        clarity: 65,
        engagement: 80
    });
    const [showSummary, setShowSummary] = useState(false);
    const [sessionStats, setSessionStats] = useState({
        questionsAnswered: 0,
        averageScore: 0,
        duration: 0,
        strengths: [],
        weaknesses: []
    });

    const videoRef = useRef(null);
    const timerRef = useRef(null);
    const durationRef = useRef(0);

    const skills = [
        'React', 'JavaScript', 'Node.js', 'Python', 'System Design',
        'Data Structures', 'Algorithms', 'Machine Learning', 'DevOps', 'Communication'
    ];

    const difficultyLevels = [
        { value: 'beginner', label: 'Beginner' },
        { value: 'intermediate', label: 'Intermediate' },
        { value: 'advanced', label: 'Advanced' },
        { value: 'expert', label: 'Expert' }
    ];

    useEffect(() => {
        // Generate initial questions based on selected skill and difficulty
        generateQuestions();
    }, [selectedSkill, difficulty]);

    useEffect(() => {
        if (isRecording) {
            // Start timer for session duration
            timerRef.current = setInterval(() => {
                durationRef.current += 1;

                // Simulate sentiment score changes
                setSentimentScore(prev => ({
                    confidence: Math.min(100, Math.max(0, prev.confidence + (Math.random() * 10 - 5))),
                    clarity: Math.min(100, Math.max(0, prev.clarity + (Math.random() * 10 - 5))),
                    engagement: Math.min(100, Math.max(0, prev.engagement + (Math.random() * 10 - 5)))
                }));
            }, 1000);
        } else {
            clearInterval(timerRef.current);
        }

        return () => clearInterval(timerRef.current);
    }, [isRecording]);

    const generateQuestions = () => {
        // In a real app, these would be generated by an LLM based on the selected skill and difficulty
        const questionsBySkill = {
            'React': [
                'Explain the concept of virtual DOM in React.',
                'What are React hooks and how do they improve component logic?',
                'Describe the component lifecycle in React.',
                'How would you optimize performance in a React application?',
                'Explain the difference between state and props in React.'
            ],
            'JavaScript': [
                'Explain closures in JavaScript.',
                'What is the event loop in JavaScript?',
                'Describe the differences between var, let, and const.',
                'How does prototypal inheritance work in JavaScript?',
                'Explain async/await and how it differs from Promises.'
            ],
            'System Design': [
                'Design a URL shortening service like bit.ly.',
                'How would you design Twitter\'s backend?',
                'Explain the architecture for a real-time chat application.',
                'Design a distributed cache system.',
                'How would you implement a notification system for a social media platform?'
            ]
        };

        // Default to React questions if the selected skill doesn't have specific questions
        const skillQuestions = questionsBySkill[selectedSkill] || questionsBySkill['React'];
        setQuestions(skillQuestions);
        setCurrentQuestion(skillQuestions[0]);
    };

    const handleStartRecording = async () => {
        try {
            // In a real app, this would access the user's camera and microphone
            const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });

            if (videoRef.current) {
                videoRef.current.srcObject = stream;
            }

            setIsRecording(true);
            setTranscript([
                { speaker: 'AI Interviewer', text: 'Hello! I\'ll be your interviewer today. Let\'s start with the first question.' },
                { speaker: 'AI Interviewer', text: currentQuestion }
            ]);
        } catch (error) {
            console.error('Error accessing media devices:', error);
        }
    };

    const handleStopRecording = () => {
        // Stop all tracks from the stream
        if (videoRef.current && videoRef.current.srcObject) {
            const tracks = videoRef.current.srcObject.getTracks();
            tracks.forEach(track => track.stop());
        }

        setIsRecording(false);
        generateFeedback();
    };

    const handleNextQuestion = () => {
        const currentIndex = questions.indexOf(currentQuestion);
        const nextIndex = (currentIndex + 1) % questions.length;
        setCurrentQuestion(questions[nextIndex]);

        // Add the new question to the transcript
        setTranscript([
            ...transcript,
            { speaker: 'AI Interviewer', text: questions[nextIndex] }
        ]);

        // Clear previous feedback
        setFeedback(null);
    };

    const handleSkillChange = (skill) => {
        setSelectedSkill(skill);
    };

    const handleDifficultyChange = (e) => {
        setDifficulty(e.target.value);
    };

    const generateFeedback = () => {
        // In a real app, this would be generated by an LLM based on the user's response
        const feedbackData = {
            score: Math.floor(Math.random() * 30) + 70, // Random score between 70-100
            strengths: [
                'Clear explanation of core concepts',
                'Good use of technical terminology',
                'Structured response with examples'
            ],
            improvements: [
                'Could provide more real-world examples',
                'Consider discussing performance implications',
                'Elaborate more on alternative approaches'
            ],
            detailedFeedback: 'Your answer demonstrated a solid understanding of the concept. You explained the key points clearly and used appropriate technical terminology. To improve, consider providing more concrete examples from real-world applications. Also, discussing the performance implications would strengthen your response. Overall, this was a good answer that shows your technical knowledge.'
        };

        setFeedback(feedbackData);

        // Update session stats
        setSessionStats(prev => ({
            ...prev,
            questionsAnswered: prev.questionsAnswered + 1,
            averageScore: (prev.averageScore * prev.questionsAnswered + feedbackData.score) / (prev.questionsAnswered + 1),
            duration: durationRef.current,
            strengths: [...new Set([...prev.strengths, ...feedbackData.strengths.slice(0, 1)])],
            weaknesses: [...new Set([...prev.weaknesses, ...feedbackData.improvements.slice(0, 1)])]
        }));
    };

    const handleEndSession = () => {
        handleStopRecording();
        setShowSummary(true);
    };

    const formatTime = (seconds) => {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
    };

    const getScoreColor = (score) => {
        if (score >= 90) return 'text-green-400';
        if (score >= 75) return 'text-blue-400';
        if (score >= 60) return 'text-yellow-400';
        return 'text-red-400';
    };

    const handleSimulateResponse = () => {
        // Simulate a user response in the transcript
        const userResponses = [
            "In React, the virtual DOM is an in-memory representation of the real DOM elements. When state changes occur, React creates a new virtual DOM tree, compares it with the previous one through a process called 'diffing', and then only updates the real DOM with the necessary changes. This approach is more efficient than directly manipulating the DOM for every change.",
            "I would approach this by first understanding the requirements and constraints. For a URL shortener, we need to generate unique short codes, store mappings between short and long URLs, and handle redirects efficiently. I'd use a hash function to generate short codes, a database to store mappings, and implement caching for frequently accessed URLs to improve performance.",
            "Closures in JavaScript occur when a function retains access to its lexical scope even when executed outside that scope. This allows for data encapsulation and the creation of private variables. A practical use case is in module patterns where we can have private state that's only accessible through privileged methods."
        ];

        const randomResponse = userResponses[Math.floor(Math.random() * userResponses.length)];

        setTranscript([
            ...transcript,
            { speaker: 'You', text: randomResponse }
        ]);

        // Generate feedback after a short delay to simulate processing
        setTimeout(() => {
            generateFeedback();
        }, 1500);
    };

    return (
        <div className="min-h-screen pt-20 px-4 sm:px-6 lg:px-8 pb-12">
            <div className="max-w-7xl mx-auto">
                {/* Header */}
                <div className="mb-8">
                    <h1 className="text-3xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-pink-400 via-purple-400 to-indigo-400">
                        AI Interview Training
                    </h1>
                    <p className="text-gray-300 mt-2">
                        Practice your interview skills with our AI-powered mock interviewer. Get real-time feedback and improve your performance.
                    </p>
                </div>

                {showSummary ? (
                    // Session Summary
                    <div className="bg-gray-900/60 backdrop-blur-lg p-8 rounded-2xl shadow-2xl border border-purple-500/20 animate-fade-in">
                        <h2 className="text-2xl font-bold mb-6 text-center bg-clip-text text-transparent bg-gradient-to-r from-pink-400 via-purple-400 to-indigo-400">
                            Training Session Summary
                        </h2>

                        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                            <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700">
                                <h3 className="text-lg font-medium mb-2 text-purple-300">Session Stats</h3>
                                <div className="space-y-3">
                                    <div className="flex justify-between">
                                        <span className="text-gray-400">Questions:</span>
                                        <span className="font-medium">{sessionStats.questionsAnswered}</span>
                                    </div>
                                    <div className="flex justify-between">
                                        <span className="text-gray-400">Duration:</span>
                                        <span className="font-medium">{formatTime(sessionStats.duration)}</span>
                                    </div>
                                    <div className="flex justify-between">
                                        <span className="text-gray-400">Average Score:</span>
                                        <span className={`font-medium ${getScoreColor(sessionStats.averageScore)}`}>
                      {Math.round(sessionStats.averageScore)}%
                    </span>
                                    </div>
                                </div>
                            </div>

                            <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700">
                                <h3 className="text-lg font-medium mb-2 text-green-300">Strengths</h3>
                                <ul className="space-y-2">
                                    {sessionStats.strengths.length > 0 ? (
                                        sessionStats.strengths.map((strength, index) => (
                                            <li key={index} className="flex items-start">
                                                <svg className="w-5 h-5 text-green-400 mr-2 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
                                                </svg>
                                                <span className="text-gray-300">{strength}</span>
                                            </li>
                                        ))
                                    ) : (
                                        <li className="text-gray-400">No strengths recorded yet</li>
                                    )}
                                </ul>
                            </div>

                            <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700">
                                <h3 className="text-lg font-medium mb-2 text-yellow-300">Areas to Improve</h3>
                                <ul className="space-y-2">
                                    {sessionStats.weaknesses.length > 0 ? (
                                        sessionStats.weaknesses.map((weakness, index) => (
                                            <li key={index} className="flex items-start">
                                                <svg className="w-5 h-5 text-yellow-400 mr-2 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                                                </svg>
                                                <span className="text-gray-300">{weakness}</span>
                                            </li>
                                        ))
                                    ) : (
                                        <li className="text-gray-400">No improvement areas recorded yet</li>
                                    )}
                                </ul>
                            </div>
                        </div>

                        <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700 mb-8">
                            <h3 className="text-lg font-medium mb-4 text-purple-300">Performance Analysis</h3>
                            <div className="space-y-4">
                                <div>
                                    <div className="flex justify-between mb-1">
                                        <span className="text-sm text-gray-400">Confidence</span>
                                        <span className="text-sm font-medium text-gray-300">{Math.round(sentimentScore.confidence)}%</span>
                                    </div>
                                    <div className="w-full bg-gray-700 rounded-full h-2.5">
                                        <div
                                            className="bg-gradient-to-r from-purple-600 to-pink-500 h-2.5 rounded-full"
                                            style={{ width: `${sentimentScore.confidence}%` }}
                                        ></div>
                                    </div>
                                </div>

                                <div>
                                    <div className="flex justify-between mb-1">
                                        <span className="text-sm text-gray-400">Clarity</span>
                                        <span className="text-sm font-medium text-gray-300">{Math.round(sentimentScore.clarity)}%</span>
                                    </div>
                                    <div className="w-full bg-gray-700 rounded-full h-2.5">
                                        <div
                                            className="bg-gradient-to-r from-blue-500 to-indigo-600 h-2.5 rounded-full"
                                            style={{ width: `${sentimentScore.clarity}%` }}
                                        ></div>
                                    </div>
                                </div>

                                <div>
                                    <div className="flex justify-between mb-1">
                                        <span className="text-sm text-gray-400">Engagement</span>
                                        <span className="text-sm font-medium text-gray-300">{Math.round(sentimentScore.engagement)}%</span>
                                    </div>
                                    <div className="w-full bg-gray-700 rounded-full h-2.5">
                                        <div
                                            className="bg-gradient-to-r from-green-500 to-teal-500 h-2.5 rounded-full"
                                            style={{ width: `${sentimentScore.engagement}%` }}
                                        ></div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div className="flex flex-col sm:flex-row justify-center gap-4">
                            <button
                                onClick={() => setShowSummary(false)}
                                className="px-6 py-3 rounded-lg bg-gradient-to-r from-pink-600 to-purple-600 hover:from-pink-500 hover:to-purple-500 text-white font-medium transition-all transform hover:scale-105"
                            >
                                Start New Session
                            </button>
                            <Link
                                to="/candidate-dashboard"
                                className="px-6 py-3 rounded-lg bg-gray-700 hover:bg-gray-600 text-white font-medium transition-all"
                            >
                                Back to Dashboard
                            </Link>
                        </div>
                    </div>
                ) : (
                    // Training Interface
                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                        {/* Left Panel - Settings & Controls */}
                        <div className="bg-gray-900/60 backdrop-blur-lg p-6 rounded-xl shadow-xl border border-purple-500/20">
                            <h2 className="text-xl font-bold mb-4 flex items-center">
                                <svg className="w-5 h-5 mr-2 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                </svg>
                                Session Settings
                            </h2>

                            <div className="space-y-6">
                                <div>
                                    <label className="block text-sm font-medium text-gray-300 mb-2">
                                        Select Skill Focus
                                    </label>
                                    <div className="flex flex-wrap gap-2">
                                        {skills.map((skill) => (
                                            <button
                                                key={skill}
                                                onClick={() => handleSkillChange(skill)}
                                                className={`px-3 py-1 text-sm rounded-full transition-colors ${
                                                    selectedSkill === skill
                                                        ? 'bg-purple-600 text-white'
                                                        : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                                                }`}
                                            >
                                                {skill}
                                            </button>
                                        ))}
                                    </div>
                                </div>

                                <div>
                                    <label htmlFor="difficulty" className="block text-sm font-medium text-gray-300 mb-2">
                                        Difficulty Level
                                    </label>
                                    <select
                                        id="difficulty"
                                        value={difficulty}
                                        onChange={handleDifficultyChange}
                                        className="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                                    >
                                        {difficultyLevels.map((level) => (
                                            <option key={level.value} value={level.value}>
                                                {level.label}
                                            </option>
                                        ))}
                                    </select>
                                </div>

                                <div className="pt-4 border-t border-gray-700">
                                    <h3 className="text-md font-medium mb-3 text-purple-300">Session Controls</h3>

                                    {!isRecording ? (
                                        <button
                                            onClick={handleStartRecording}
                                            className="w-full py-3 px-4 rounded-lg bg-gradient-to-r from-green-600 to-teal-600 hover:from-green-500 hover:to-teal-500 text-white font-medium transition-all transform hover:scale-105 flex items-center justify-center"
                                        >
                                            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"></path>
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                            </svg>
                                            Start Session
                                        </button>
                                    ) : (
                                        <div className="space-y-3">
                                            <button
                                                onClick={handleStopRecording}
                                                className="w-full py-3 px-4 rounded-lg bg-red-600 hover:bg-red-500 text-white font-medium transition-all flex items-center justify-center"
                                            >
                                                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 10a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1v-4z"></path>
                                                </svg>
                                                Stop Recording
                                            </button>

                                            <button
                                                onClick={handleNextQuestion}
                                                className="w-full py-3 px-4 rounded-lg bg-blue-600 hover:bg-blue-500 text-white font-medium transition-all flex items-center justify-center"
                                            >
                                                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 5l7 7-7 7M5 5l7 7-7 7"></path>
                                                </svg>
                                                Next Question
                                            </button>

                                            <button
                                                onClick={handleEndSession}
                                                className="w-full py-3 px-4 rounded-lg bg-purple-600 hover:bg-purple-500 text-white font-medium transition-all flex items-center justify-center"
                                            >
                                                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
                                                </svg>
                                                End Session
                                            </button>
                                        </div>
                                    )}
                                </div>

                                {isRecording && (
                                    <div className="pt-4 border-t border-gray-700">
                                        <h3 className="text-md font-medium mb-3 text-purple-300">Real-time Metrics</h3>
                                        <div className="space-y-3">
                                            <div>
                                                <div className="flex justify-between mb-1">
                                                    <span className="text-xs text-gray-400">Confidence</span>
                                                    <span className="text-xs font-medium text-gray-300">{Math.round(sentimentScore.confidence)}%</span>
                                                </div>
                                                <div className="w-full bg-gray-700 rounded-full h-1.5">
                                                    <div
                                                        className="bg-gradient-to-r from-purple-600 to-pink-500 h-1.5 rounded-full"
                                                        style={{ width: `${sentimentScore.confidence}%` }}
                                                    ></div>
                                                </div>
                                            </div>

                                            <div>
                                                <div className="flex justify-between mb-1">
                                                    <span className="text-xs text-gray-400">Clarity</span>
                                                    <span className="text-xs font-medium text-gray-300">{Math.round(sentimentScore.clarity)}%</span>
                                                </div>
                                                <div className="w-full bg-gray-700 rounded-full h-1.5">
                                                    <div
                                                        className="bg-gradient-to-r from-blue-500 to-indigo-600 h-1.5 rounded-full"
                                                        style={{ width: `${sentimentScore.clarity}%` }}
                                                    ></div>
                                                </div>
                                            </div>

                                            <div>
                                                <div className="flex justify-between mb-1">
                                                    <span className="text-xs text-gray-400">Engagement</span>
                                                    <span className="text-xs font-medium text-gray-300">{Math.round(sentimentScore.engagement)}%</span>
                                                </div>
                                                <div className="w-full bg-gray-700 rounded-full h-1.5">
                                                    <div
                                                        className="bg-gradient-to-r from-green-500 to-teal-500 h-1.5 rounded-full"
                                                        style={{ width: `${sentimentScore.engagement}%` }}
                                                    ></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                )}
                            </div>
                        </div>

                        {/* Center Panel - Video and Current Question */}
                        <div className="lg:col-span-2">
                            <div className="bg-gray-900/60 backdrop-blur-lg rounded-xl shadow-xl border border-purple-500/20 overflow-hidden">
                                {/* Video Preview */}
                                <div className="aspect-video bg-black relative">
                                    <video
                                        ref={videoRef}
                                        className="w-full h-full object-cover"
                                        autoPlay
                                        muted
                                        playsInline
                                    ></video>

                                    {!isRecording && (
                                        <div className="absolute inset-0 flex items-center justify-center bg-black/70">
                                            <div className="text-center">
                                                <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-purple-600/30 flex items-center justify-center">
                                                    <svg className="w-8 h-8 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                                                    </svg>
                                                </div>
                                                <p className="text-gray-300">Click "Start Session" to begin</p>
                                            </div>
                                        </div>
                                    )}

                                    {isRecording && (
                                        <div className="absolute top-4 left-4 flex items-center bg-black/50 backdrop-blur-sm px-3 py-1 rounded-full">
                                            <span className="w-3 h-3 bg-red-500 rounded-full animate-pulse mr-2"></span>
                                            <span className="text-sm text-white">Recording</span>
                                        </div>
                                    )}
                                </div>

                                {/* Current Question & Transcript */}
                                <div className="p-6">
                                    {currentQuestion && (
                                        <div className="mb-6">
                                            <h3 className="text-lg font-medium mb-2 text-purple-300">Current Question:</h3>
                                            <div className="bg-gray-800/70 p-4 rounded-lg border border-gray-700">
                                                <p className="text-white">{currentQuestion}</p>
                                            </div>
                                        </div>
                                    )}

                                    {isRecording && (
                                        <div>
                                            <div className="flex justify-between items-center mb-3">
                                                <h3 className="text-lg font-medium text-purple-300">Conversation</h3>
                                                <button
                                                    onClick={handleSimulateResponse}
                                                    className="px-3 py-1 text-sm bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors"
                                                >
                                                    Simulate Response
                                                </button>
                                            </div>

                                            <div className="bg-gray-800/70 rounded-lg border border-gray-700 p-4 max-h-60 overflow-y-auto">
                                                <div className="space-y-4">
                                                    {transcript.map((entry, index) => (
                                                        <div key={index} className={`flex ${entry.speaker === 'AI Interviewer' ? 'justify-start' : 'justify-end'}`}>
                                                            <div
                                                                className={`max-w-[80%] p-3 rounded-lg ${
                                                                    entry.speaker === 'AI Interviewer'
                                                                        ? 'bg-gray-700 text-white rounded-tl-none'
                                                                        : 'bg-purple-700 text-white rounded-tr-none'
                                                                }`}
                                                            >
                                                                <p className="text-xs font-bold mb-1 opacity                                  70">{entry.speaker}</p>
                                                                <p className="text-sm">{entry.text}</p>
                                                            </div>
                                                        </div>
                                                    ))}
                                                </div>
                                            </div>
                                        </div>
                                    )}

                                    {feedback && (
                                        <div className="mt-6 animate-fade-in">
                                            <h3 className="text-lg font-medium mb-3 text-purple-300">AI Feedback:</h3>
                                            <div className="bg-purple-900/30 p-4 rounded-lg border border-purple-600">
                                                <div className="flex items-center justify-between mb-3">
                                                    <span className="font-medium">Overall Score:</span>
                                                    <span className={`font-bold text-lg ${getScoreColor(feedback.score)}`}>{feedback.score}%</span>
                                                </div>

                                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                                    <div>
                                                        <h4 className="text-sm font-medium mb-2 text-green-300">Strengths:</h4>
                                                        <ul className="text-sm space-y-1">
                                                            {feedback.strengths.map((strength, index) => (
                                                                <li key={index} className="flex items-start">
                                                                    <svg className="w-4 h-4 text-green-400 mr-1 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
                                                                    </svg>
                                                                    <span className="text-gray-300">{strength}</span>
                                                                </li>
                                                            ))}
                                                        </ul>
                                                    </div>

                                                    <div>
                                                        <h4 className="text-sm font-medium mb-2 text-yellow-300">Areas to Improve:</h4>
                                                        <ul className="text-sm space-y-1">
                                                            {feedback.improvements.map((improvement, index) => (
                                                                <li key={index} className="flex items-start">
                                                                    <svg className="w-4 h-4 text-yellow-400 mr-1 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                                                                    </svg>
                                                                    <span className="text-gray-300">{improvement}</span>
                                                                </li>
                                                            ))}
                                                        </ul>
                                                    </div>
                                                </div>

                                                <div>
                                                    <h4 className="text-sm font-medium mb-2 text-purple-300">Detailed Feedback:</h4>
                                                    <p className="text-sm text-gray-300">{feedback.detailedFeedback}</p>
                                                </div>
                                            </div>
                                        </div>
                                    )}
                                </div>
                            </div>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
};

export default TrainingMode;
